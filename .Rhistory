y=yhat1[,2]
a_model=data.frame("Y"=y-y0,"X"=y1-y0)
a_lm=lm(Y ~ 0 + X, data=a_model) #regression model without intercept
a=a_lm$coefficients
yhat=(1-a)*y0+a*y1
Yhat=c(yhat,yhat0[(n1+1):n0,1])
theta=beta[1:10];gamma=beta[11:20]
sigma11=Cor[1:10,1:10]
sigma12=Cor[1:10,11:20]
sigma21=Cor[11:20,1:10]
sigma22=Cor[11:20,11:20]
solve(sigma11)
chol(sigma11)
solve(sigma11)%*% sigma11
lmFit0$finalModel$coefficients
c(lmFit0$finalModel$coefficients[-1],rep(0,10))
lmFit1$finalModel$coefficients[-1]
hatb_M0=c(lmFit0$finalModel$coefficients[-1],rep(0,10))
#hatb_M0=lmFit0$finalModel$coefficients[-1]
hatb_M1=lmFit1$finalModel$coefficients[-1]
hatb_com=matrix((1-a)*hatb_M0+a*hatb_M1,nrow=20)
matrix((1-a)*hatb_M0+a*hatb_M1,nrow=20)
t(hatb_com-beta) %*% Cor %*% (hatb_com-beta)
hatb_com
beta
t(hatb_com[1:10]-beta[1:10]) %*% sigma11 %*% (hatb_com[1:10]-beta[1:10])
hatb_M1
beta
t(hatb_M1-beta) %*% Cor %*% (hatb_M1-beta)
t(hatb_M1[1:10]-beta[1:10]) %*% sigma11 %*% (hatb_M1[1:10]-beta[1:10])
library(plyr); library(dplyr)
library(tidyr)
library (caret )
library(ggplot2)
library(doParallel)
library(xtable)
library(knitr)
library(RColorBrewer)
library(DT)  #apply widget to make table
library(mice)
library(VIM)
library(MASS)
rm(list=ls())
options(digits=2) # only show 2 digit numbers
#generate R
R=matrix(NA,nrow=20,ncol=20)
set.seed(112233)
a=runif(400)
for(i in 1:400){
if(a[i]<= 0.25){
R[i]=runif(1,-1,1)
}
else if(a[i]<=0.5){
R[i]=runif(1,-10,-10)
}
else if(a[i]<=0.75){
R[i]=runif(1,-0.5,0.5)
}
else
R[i]=runif(1,10,20)
}
R[lower.tri(R)] <- 0
######################################################
#degree=30;subset=c(1:5);n0=1000;n1=80
df=function(degree,subset,n0,n1){
{
#correlation structure
diag(R)=degree
B=t(R)  %*%  R
Cor=diag(1/sqrt(diag(B))) %*% B %*% diag(1/sqrt(diag(B)))
#generate X
#x=vector("list",length=20)
set.seed(445566)
x=mvrnorm(n0, mu=rep(0,20), Sigma=Cor)
#generate Y
beta=rep(0,20)  #Beta is fixed to 1
beta[subset]=rep(1,5)
beta=matrix(beta,nrow=20)
eps=sqrt(t(beta) %*% var(x) %*% beta) #residual variance
e=rnorm(100,0,eps)
y=x %*% beta+e
data=as.data.frame(cbind(y,x))
names(data)=c("Y",paste("X",c(1:20),sep=""))
#missingness pattern
M0=data[,c("Y",paste("X",c(1:10),sep=""))]
M1=data[1:n1,]
incomplete=data #full data
incomplete[(n1+1):n0,c(paste("X",c(11:20), sep=""))]=NA #observed data
#M0 and M1
ctr <- trainControl(method = "LOOCV")
lmFit0 <- train(Y ~ ., data = M0,
#preProc=c('center', 'scale'),
method = "lm",
trControl = ctr
)
yhat0=lmFit0$pred
lmFit1 <- train(Y ~ ., data = M1,
#preProc=c('center', 'scale'),
method = "lm",
trControl = ctr
)
yhat1=lmFit1$pred
#Alpha
y0=yhat0[1:n1,1]
y1=yhat1[,1]
y=yhat1[,2]
a_model=data.frame("Y"=y-y0,"X"=y1-y0)
a_lm=lm(Y ~ 0 + X, data=a_model) #regression model without intercept
a=a_lm$coefficients
yhat=(1-a)*y0+a*y1
Yhat=c(yhat,yhat0[(n1+1):n0,1])
theta=beta[1:10];gamma=beta[11:20]
sigma11=Cor[1:10,1:10]
sigma12=Cor[1:10,11:20]
sigma21=Cor[11:20,1:10]
sigma22=Cor[11:20,11:20]
###Theoretical testing error of combination model
hatb_M0=c(lmFit0$finalModel$coefficients[-1],rep(0,10))
hatb_M1=lmFit1$finalModel$coefficients[-1]
hatb_com=matrix((1-a)*hatb_M0+a*hatb_M1,nrow=20)
#hatb_com=matrix(c((1-a)*hatb_M0+a*hatb_M1[1:10],hatb_M1[11:20]),nrow=20)
#error of complete case
err_C_comp=t(hatb_com-beta) %*% Cor %*% (hatb_com-beta)
#error of incomplete case
err_C_incomp=t(hatb_com[1:10]-beta[1:10]) %*% sigma11 %*% (hatb_com[1:10]-beta[1:10])
###Theoretical testing error of M1 (M_max)
#error of complete case
err_M1=t(hatb_M1-beta) %*% Cor %*% (hatb_M1-beta)
#error of incomplete case
err_M1=t(hatb_M1[1:10]-beta[1:10]) %*% sigma11 %*% (hatb_M1[1:10]-beta[1:10])
###Theoretical testing error of Multiple Imputation
set.seed(2237)
A=coef(lm(cbind(X11,X12,X13, X14, X15, X16, X17, X18, X19, X20) ~ X1+X2+X3+X4+X5+X6+X7+X8+X9+X10, data=incomplete[1:n1,]))
U=incomplete[(n1+1):n0,2:11]
V=U*A[-1,]
#delta=theta+ A[-1,] %*% gamma
time=20
imp <- mice(incomplete, meth='norm', seed=2237, m = time, print=FALSE)
modelFit <- with(imp,lm(Y~ X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20))
hatbeta=summary(pool(modelFit))[-1,1]
hattheta=hatbeta[1:10];hatgamma=hatbeta[11:20]
#3 parameters
hatdelta=hattheta+ A[-1,] %*% hatgamma
hatxi=hattheta+ solve(sigma11) %*% sigma12 %*% hatgamma
xi=theta + solve(sigma11) %*% sigma12 %*% gamma
#error of incomplete case
err_MI_incomp=t(hatdelta-xi) %*% Cor[1:10,1:10] %*% (hatdelta-xi)
#error of complete case
err_MI_comp=t(hatxi-xi) %*% Cor[1:10,1:10] %*% (hatxi-xi)
###Theoretical testing error of M0
hatthe=lmFit0$finalModel$coefficients[-1]
xi=theta + solve(sigma11) %*% sigma12 %*% gamma
E_u=t(hatthe-xi) %*% sigma11 %*% (hatthe-xi)
Var_v=t(gamma) %*% (sigma22-sigma21 %*% solve(sigma11) %*% sigma12) %*% gamma
err_M0_incomp=E_u #error of incomplete case
err_M0_comp=E_u+Var_v #error of complete case
}
return(list(combination=c(err_C_comp,err_C_incomp),
M0=c(err_M0_comp,err_M0_incomp),
M1=c(err_M1_comp,err_M1_incomp),
MI=c(err_MI_comp,err_MI_incomp)))
}
df(degree=1,subset=c(1:5),n0=1000,n1=200)
df(degree=1,subset=c(1:5),n0=1000,n1=80)
df(degree=1,subset=c(1:5),n0=1000,n1=40)
library(plyr); library(dplyr)
library(tidyr)
library (caret )
library(ggplot2)
library(doParallel)
library(xtable)
library(knitr)
library(RColorBrewer)
library(DT)  #apply widget to make table
library(mice)
library(VIM)
library(MASS)
rm(list=ls())
options(digits=2) # only show 2 digit numbers
#generate R
R=matrix(NA,nrow=20,ncol=20)
set.seed(112233)
a=runif(400)
for(i in 1:400){
if(a[i]<= 0.25){
R[i]=runif(1,-1,1)
}
else if(a[i]<=0.5){
R[i]=runif(1,-10,-10)
}
else if(a[i]<=0.75){
R[i]=runif(1,-0.5,0.5)
}
else
R[i]=runif(1,10,20)
}
R[lower.tri(R)] <- 0
######################################################
#degree=30;subset=c(1:5);n0=1000;n1=80
df=function(degree,subset,n0,n1){
{
#correlation structure
diag(R)=degree
B=t(R)  %*%  R
Cor=diag(1/sqrt(diag(B))) %*% B %*% diag(1/sqrt(diag(B)))
#generate X
#x=vector("list",length=20)
set.seed(445566)
x=mvrnorm(n0, mu=rep(0,20), Sigma=Cor)
#generate Y
beta=rep(0,20)  #Beta is fixed to 1
beta[subset]=rep(1,5)
beta=matrix(beta,nrow=20)
eps=sqrt(t(beta) %*% var(x) %*% beta) #residual variance
e=rnorm(100,0,eps)
y=x %*% beta+e
data=as.data.frame(cbind(y,x))
names(data)=c("Y",paste("X",c(1:20),sep=""))
#missingness pattern
M0=data[,c("Y",paste("X",c(1:10),sep=""))]
M1=data[1:n1,]
incomplete=data #full data
incomplete[(n1+1):n0,c(paste("X",c(11:20), sep=""))]=NA #observed data
#M0 and M1
ctr <- trainControl(method = "LOOCV")
lmFit0 <- train(Y ~ ., data = M0,
#preProc=c('center', 'scale'),
method = "lm",
trControl = ctr
)
yhat0=lmFit0$pred
lmFit1 <- train(Y ~ ., data = M1,
#preProc=c('center', 'scale'),
method = "lm",
trControl = ctr
)
yhat1=lmFit1$pred
#Alpha
y0=yhat0[1:n1,1]
y1=yhat1[,1]
y=yhat1[,2]
a_model=data.frame("Y"=y-y0,"X"=y1-y0)
a_lm=lm(Y ~ 0 + X, data=a_model) #regression model without intercept
a=a_lm$coefficients
yhat=(1-a)*y0+a*y1
Yhat=c(yhat,yhat0[(n1+1):n0,1])
theta=beta[1:10];gamma=beta[11:20]
sigma11=Cor[1:10,1:10]
sigma12=Cor[1:10,11:20]
sigma21=Cor[11:20,1:10]
sigma22=Cor[11:20,11:20]
###Theoretical testing error of combination model
hatb_M0=c(lmFit0$finalModel$coefficients[-1],rep(0,10))
hatb_M1=lmFit1$finalModel$coefficients[-1]
hatb_com=matrix((1-a)*hatb_M0+a*hatb_M1,nrow=20)
#hatb_com=matrix(c((1-a)*hatb_M0+a*hatb_M1[1:10],hatb_M1[11:20]),nrow=20)
#error of complete case
err_C_comp=t(hatb_com-beta) %*% Cor %*% (hatb_com-beta)
#error of incomplete case
err_C_incomp=t(hatb_com[1:10]-beta[1:10]) %*% sigma11 %*% (hatb_com[1:10]-beta[1:10])
###Theoretical testing error of M1 (M_max)
#error of complete case
err_M1_comp=t(hatb_M1-beta) %*% Cor %*% (hatb_M1-beta)
#error of incomplete case
err_M1_incomp=t(hatb_M1[1:10]-beta[1:10]) %*% sigma11 %*% (hatb_M1[1:10]-beta[1:10])
###Theoretical testing error of Multiple Imputation
set.seed(2237)
A=coef(lm(cbind(X11,X12,X13, X14, X15, X16, X17, X18, X19, X20) ~ X1+X2+X3+X4+X5+X6+X7+X8+X9+X10, data=incomplete[1:n1,]))
U=incomplete[(n1+1):n0,2:11]
V=U*A[-1,]
#delta=theta+ A[-1,] %*% gamma
time=20
imp <- mice(incomplete, meth='norm', seed=2237, m = time, print=FALSE)
modelFit <- with(imp,lm(Y~ X1+X2+X3+X4+X5+X6+X7+X8+X9+X10+X11+X12+X13+X14+X15+X16+X17+X18+X19+X20))
hatbeta=summary(pool(modelFit))[-1,1]
hattheta=hatbeta[1:10];hatgamma=hatbeta[11:20]
#3 parameters
hatdelta=hattheta+ A[-1,] %*% hatgamma
hatxi=hattheta+ solve(sigma11) %*% sigma12 %*% hatgamma
xi=theta + solve(sigma11) %*% sigma12 %*% gamma
#error of incomplete case
err_MI_incomp=t(hatdelta-xi) %*% Cor[1:10,1:10] %*% (hatdelta-xi)
#error of complete case
err_MI_comp=t(hatxi-xi) %*% Cor[1:10,1:10] %*% (hatxi-xi)
###Theoretical testing error of M0
hatthe=lmFit0$finalModel$coefficients[-1]
xi=theta + solve(sigma11) %*% sigma12 %*% gamma
E_u=t(hatthe-xi) %*% sigma11 %*% (hatthe-xi)
Var_v=t(gamma) %*% (sigma22-sigma21 %*% solve(sigma11) %*% sigma12) %*% gamma
err_M0_incomp=E_u #error of incomplete case
err_M0_comp=E_u+Var_v #error of complete case
}
return(list(combination=c(err_C_comp,err_C_incomp),
M0=c(err_M0_comp,err_M0_incomp),
M1=c(err_M1_comp,err_M1_incomp),
MI=c(err_MI_comp,err_MI_incomp)))
}
df(degree=1,subset=c(1:5),n0=1000,n1=200)
df(degree=1,subset=c(1:5),n0=100,n1=80)
degree=30;subset=c(1:5);n0=1000;n1=80
degree=30;subset=c(1:5);n0=1000;n1=80
degree=1;subset=c(1:5);n0=100;n1=80
diag(R)=degree
B=t(R)  %*%  R
Cor=diag(1/sqrt(diag(B))) %*% B %*% diag(1/sqrt(diag(B)))
#generate X
#x=vector("list",length=20)
set.seed(445566)
x=mvrnorm(n0, mu=rep(0,20), Sigma=Cor)
#generate Y
beta=rep(0,20)  #Beta is fixed to 1
beta[subset]=rep(1,5)
beta=matrix(beta,nrow=20)
eps=sqrt(t(beta) %*% var(x) %*% beta) #residual variance
e=rnorm(100,0,eps)
y=x %*% beta+e
data=as.data.frame(cbind(y,x))
names(data)=c("Y",paste("X",c(1:20),sep=""))
#missingness pattern
M0=data[,c("Y",paste("X",c(1:10),sep=""))]
M1=data[1:n1,]
incomplete=data #full data
incomplete[(n1+1):n0,c(paste("X",c(11:20), sep=""))]=NA #observed data
#M0 and M1
ctr <- trainControl(method = "LOOCV")
lmFit0 <- train(Y ~ ., data = M0,
#preProc=c('center', 'scale'),
method = "lm",
trControl = ctr
)
yhat0=lmFit0$pred
lmFit1 <- train(Y ~ ., data = M1,
#preProc=c('center', 'scale'),
method = "lm",
trControl = ctr
)
yhat1=lmFit1$pred
#Alpha
y0=yhat0[1:n1,1]
y1=yhat1[,1]
y=yhat1[,2]
a_model=data.frame("Y"=y-y0,"X"=y1-y0)
a_lm=lm(Y ~ 0 + X, data=a_model) #regression model without intercept
a=a_lm$coefficients
yhat=(1-a)*y0+a*y1
Yhat=c(yhat,yhat0[(n1+1):n0,1])
theta=beta[1:10];gamma=beta[11:20]
sigma11=Cor[1:10,1:10]
sigma12=Cor[1:10,11:20]
sigma21=Cor[11:20,1:10]
sigma22=Cor[11:20,11:20]
###Theoretical testing error of combination model
hatb_M0=c(lmFit0$finalModel$coefficients[-1],rep(0,10))
hatb_M1=lmFit1$finalModel$coefficients[-1]
hatb_com=matrix((1-a)*hatb_M0+a*hatb_M1,nrow=20)
#hatb_com=matrix(c((1-a)*hatb_M0+a*hatb_M1[1:10],hatb_M1[11:20]),nrow=20)
t(hatb_com-beta) %*% Cor %*% (hatb_com-beta)
t(hatb_com[1:10]-beta[1:10]) %*% sigma11 %*% (hatb_com[1:10]-beta[1:10])
hatb_com[1:10]
hatb_com
a
lmFit1$finalModel$coefficients[-1]
lmFit0$finalModel$coefficients[-1]
matrix(c((1-a)*hatb_M0+a*hatb_M1[1:10],hatb_M1[11:20]),nrow=20)
lmFit0$finalModel$coefficients
lmFit1$finalModel$coefficients
hatb_M0
c(lmFit0$finalModel$coefficients[-1],rep(0,10))
lmFit0$finalModel$coefficients[-1]
lmFit0$finalModel$coefficients
library(slidify)
author("visualization")
publish(user = "laoshen22", repo = "Visualization")
publish(user = "laoshen22", repo = "Visualization")
publish(title = 'Visualization', 'index.html', host = 'rpubs')
library(slidify)
author("visualization")
publish(user = "laoshen22", repo = "visualization")
publish(user = "laoshen22", repo = "visualization")
publish(user = "laoshen22", repo = "visualization")
publish(user = "laoshen22", repo = "visualization")
x=c(11564,34356)
x
x=data.frame(11564,34356,23423,56756,12334,45764,123424,56787,34532,23423,34532)
x
names(x)=c("北京","北京","北京","北京","北京","北京","北京","北京","北京",)
names(x)=c("北京","北京","北京","北京","北京","北京","北京","北京","北京","北京","北京")
x
x=data.frame(11564,34356,23423,56756,12334,45764,123424,56787,34532,23423,34532)
names(x)=c("北京","上海","广州","深圳","成都","南京","昆明","杭州","石家庄","天津","重庆")
library(DT)
x=data.frame(11564,34356,23423,56756,12334,45764,123424,56787,34532,23423,34532)
names(x)=c("北京","上海","广州","深圳","成都","南京","昆明","杭州","石家庄","天津","重庆")
datatable(x)
require(rCharts)
n1 <- nPlot(x, group = "model", data = x, type = "multiBarChart")
x
num=c(11564,34356,23423,56756,12334,45764,123424,56787,34532,23423,34532)
city=c("北京","上海","广州","深圳","成都","南京","昆明","杭州","石家庄","天津","重庆")
data=data.frame(city,num)
data
n1 <- nPlot(num ~ city, group = "model", data = data, type = "multiBarChart")
n1$show("inline", include_assets = TRUE, cdn = F)
n1$print("chart1")
n1
require(rCharts)
n1 <- nPlot(num ~ city, group = "city", data = data, type = "multiBarChart")
n1$show("inline", include_assets = TRUE, cdn = F)
n1
num=c(11564,34356,23423,56756,12334,56787,123424,45764,34532,23423,34532)
city=c("北京","上海","广州","深圳","成都","南京","昆明","杭州","石家庄","天津","重庆")
n1 <- nPlot(num ~ city, group = "city", data = data, type = "multiBarChart")
n1
data
num=c(11564,34356,23423,56756,12334,76587,23424,45764,34532,23423,34532)
city=c("北京","上海","广州","深圳","成都","南京","昆明","杭州","石家庄","天津","重庆")
n1 <- nPlot(num ~ city, group = "city", data = data, type = "multiBarChart")
n1
data
num=c(11564,34356,23423,56756,72334,56787,23424,45764,34532,23423,34532)
city=c("北京","上海","广州","深圳","成都","南京","昆明","杭州","石家庄","天津","重庆")
data=data.frame(city,num)
n1 <- nPlot(num ~ city, group = "city", data = data, type = "multiBarChart")
n1
data
setwd
setwd("~/SkyDrive/Puhui/talk")
setwd("~/SkyDrive/Puhui")
library(RgoogleMaps)
require(maps)
require(ggmap)
library(dplyr)
library(DT)  #apply widget to make table
library(htmltools)
library(htmlwidgets)
library(metricsgraphics)
library(RColorBrewer)
library(leaflet)
library(knitr)
library(googleVis)
library(readxl)
dat=read_excel("Delay.xlsx")
dat1=mutate(dat,
零首付逾期占比 = 零首付逾期个数 / 零首付注册个数,
非零首付逾期占比 = 非零首付逾期个数/非零首付注册个数
)
dat1
Prov=read.csv("dat_by_prov.csv")
Prov
Prov$prov=dat1$省
Prov$prov<-paste(Prov$prov, "省", sep="")
Prov$prov[c(14,18,21)]=c("内蒙古自治区","上海市","重庆市")
Prov
setwd("~/SkyDrive/Puhui/talk")
data
dat1
Prov=read.csv("dat_by_prov.csv")
Prov$prov=data$city
install.packages("dygraphs")
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(nhtemp, main = "New Haven Temperatures", ylab = "Temp (F)")
library(webshot)
webshot::install_phantomjs()
devtools::install_github("wch/webshot")
library(webshot)
URL <- "http://rstudio.github.io/leaflet/"
# Might need a longer delay for all assets to display
webshot(URL, delay = 0.5)
URL <- "http://rstudio.github.io/leaflet/"
# Might need a longer delay for all assets to display
webshot(URL, cliprect = "viewport")
?gvisMotionChart
require(googleVis)
M7 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year",
xvar="Profit", yvar="Expenses",
colorvar="Location", sizevar="Sales")
plot(M7)
M1 <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
plot(M1)
Fruits
M1
plot(M1)
setwd()
getwd()
new_report("MY REPORT")
install.packages("reports")
library(devtools)
install_github("reports", "trinker")
options(bib.loc = "C:/Users/trinker/Desktop/PhD Program/MASTER.bib")
options(name.reports = "Tyler Rinker\\\\University at Buffalo")
options(sources.reports = path.expand("~/path_1"), path.expand("~/path_2"))
options(temp.reports = "apa6.mod.qual_tex")
options(github.user = "trinker")
options(speed.temp = list(`1` = "wordpress_rmd", `2` = "basic_rmd", `3` = "apa6.mod.qual_tex"))
options(present.template = "revealjs")
setwd(desired.location)
new_report("NEW")
setwd("~/SkyDrive/Puhui/talk")
new_report("NEW")
presentation("NEW")
options(bib.loc = "C:/Users/trinker/Desktop/PhD Program/MASTER.bib")
options(name.reports = "Tyler Rinker\\\\University at Buffalo")
options(sources.reports = path.expand("~/path_1"), path.expand("~/path_2"))
options(temp.reports = "apa6.mod.qual_tex")
options(github.user = "trinker")
options(speed.temp = list(`1` = "wordpress_rmd", `2` = "basic_rmd", `3` = "apa6.mod.qual_tex"))
options(present.template = "revealjs")
presentation("NEW")
new_report("NEW")
